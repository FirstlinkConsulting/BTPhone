

# include external events

# user event definition

event M_EVT_1;
event M_EVT_ABPLAY;
event M_EVT_ALARM_PLAY;
event M_EVT_AUDIO_CTRL;
event M_EVT_AUDIO_CTRL_TIMER;
event M_EVT_AUDIO_VOICE;
event M_EVT_BTPHONE;
event M_EVT_BTPLAYER;
event M_EVT_CAM_CAP;
event M_EVT_CAM_FAILURE;
event M_EVT_CHARGER;
event M_EVT_CHARGER_OUT;
event M_EVT_CLIP;
event M_EVT_EXIT;
event M_EVT_EXIT_MODE;
event M_EVT_FLIP_OFF;
event M_EVT_FLIP_ON;
event M_EVT_HEADSET_KEY;
event M_EVT_LINEIN_PLAY;
event M_EVT_LINE_IN;
event M_EVT_MENU;
event M_EVT_NETWORK_REG_CHANGED;
event M_EVT_NEXT;
event M_EVT_PUB_TIMER;
event M_EVT_PULLOUT_SD;
event M_EVT_RADIO;
event M_EVT_RADIO_REC;
event M_EVT_RECORD;
event M_EVT_RESTART;
event M_EVT_RETURN;
event M_EVT_RETURN2;
event M_EVT_RETURN_ROOT;
event M_EVT_RING_OFF;
event M_EVT_RING_ON;
event M_EVT_SCC_COMMAND_FAILED;
event M_EVT_SCC_COMMAND_OK;
event M_EVT_SCC_ESTABLISHED;
event M_EVT_SCC_HANGUP;
event M_EVT_SCC_INCOMING;
event M_EVT_SCC_RING;
event M_EVT_SCC_STATE_CHANGED;
event M_EVT_SDCARD;
event M_EVT_SD_AUDIO;
event M_EVT_SD_RECORD;
event M_EVT_SD_VOICE;
event M_EVT_SMS_CMT;
event M_EVT_SMS_CMTI;
event M_EVT_TIMEOUT;
event M_EVT_TOMPLAY;
event M_EVT_UPDATA;
event M_EVT_USBDISK;
event M_EVT_USBHOSTDISK;
event M_EVT_USB_AUDIO;
event M_EVT_USB_DETECT;
event M_EVT_USB_IN;
event M_EVT_USB_OUT;
event M_EVT_USER_KEY;
event M_EVT_VOLTAGE;
event M_EVT_Z00_POWEROFF;
event M_EVT_Z01_MUSIC_PLAY;
event M_EVT_Z02_STANDBY;

# This is the initial state after startup
# initsystem
state s_init_system =
{
  module = init/s_init_system;

# standard functions:
  init = initinit_system;
  exit = exitinit_system;
  paint = paintinit_system;

# event handle functions
  function handleinit_system;

# transitions
  M_EVT_1 ->s_init_power_on;
  M_EVT_UPDATA +>set_firmware_updata;

# call event functions
  _default      -> handleinit_system;
}

# showpoweronpicture
state s_init_power_on =
{
  module = init/s_init_power_on;

# standard functions:
  init = initinit_power_on;
  exit = exitinit_power_on;
  paint = paintinit_power_on;

# event handle functions
  function handleinit_power_on;

# transitions
  M_EVT_NEXT ->s_stdb_standby;
  M_EVT_RESTART ->_return;
  M_EVT_RETURN_ROOT +>_return(STACKROOT);

# call event functions
  _default      -> handleinit_power_on;
}

# firmwareupdata
state set_firmware_updata =
{
  module = init/set_firmware_updata;

# standard functions:
  init = initset_firmware_updata;
  exit = exitset_firmware_updata;
  paint = paintset_firmware_updata;

# event handle functions
  function handleset_firmware_updata;

# transitions
  M_EVT_EXIT ->_return;

# call event functions
  _default      -> handleset_firmware_updata;
}

# standbyinterface
state s_stdb_standby =
{
  module = standby/s_stdb_standby;

# standard functions:
  init = initstdb_standby;
  exit = exitstdb_standby;
  paint = paintstdb_standby;

# event handle functions
  function handlestdb_standby;

# transitions
  M_EVT_AUDIO_VOICE +>s_audio_main;
  M_EVT_BTPLAYER +>s_bt_player;
  M_EVT_CAM_CAP +>s_camera_capture;
  M_EVT_LINEIN_PLAY +>s_linein_play;
  M_EVT_PULLOUT_SD +>s_pub_pullout_sd;
  M_EVT_RADIO +>s_radio_player;
  M_EVT_RECORD +>s_audio_record;
  M_EVT_SD_AUDIO +>s_audio_main;
  M_EVT_SD_RECORD +>s_audio_record;
  M_EVT_SD_VOICE +>s_audio_main;
  M_EVT_TOMPLAY +>s_audio_tomplay;
  M_EVT_UPDATA +>set_firmware_updata;
  M_EVT_USBDISK ->s_pub_usbdisk;
  M_EVT_USB_AUDIO +>s_audio_main;
  M_EVT_USB_DETECT +>s_pub_usb_detect;

# call event functions
  _default      -> handlestdb_standby;
}

# HFP
state s_bt_phone =
{
  module = radio/s_bt_phone;

# standard functions:
  init = initbt_phone;
  exit = exitbt_phone;
  paint = paintbt_phone;

# event handle functions
  function handlebt_phone;

# transitions
  M_EVT_EXIT ->_return;
  M_EVT_EXIT_MODE ->_return(2);
  M_EVT_RETURN_ROOT +>_return(STACKROOT);

# call event functions
  _default      -> handlebt_phone;
}

# A2DP
state s_bt_player =
{
  module = radio/s_bt_player;

# standard functions:
  init = initbt_player;
  exit = exitbt_player;
  paint = paintbt_player;

# event handle functions
  function handlebt_player;

# transitions
  M_EVT_BTPHONE +>s_bt_phone;
  M_EVT_EXIT ->_return;
  M_EVT_MENU +>s_pub_set_menu;
  M_EVT_RADIO_REC +>s_audio_record;
  M_EVT_RETURN ->_return;
  M_EVT_RETURN_ROOT +>_return(STACKROOT);

# call event functions
  _default      -> handlebt_player;
}

# switchoff
state s_pub_switch_off =
{
  module = public/s_pub_switch_off;

# standard functions:
  init = initpub_switch_off;
  exit = exitpub_switch_off;
  paint = paintpub_switch_off;

# event handle functions
  function handlepub_switch_off;

# transitions
  M_EVT_ALARM_PLAY ->s_init_power_on;
  M_EVT_EXIT ->_return;
  M_EVT_RESTART ->s_init_power_on;

# call event functions
  _default      -> handlepub_switch_off;
}

# charger
state s_pub_charger =
{
  module = public/s_pub_charger;

# standard functions:
  init = initpub_charger;
  exit = exitpub_charger;
  paint = paintpub_charger;

# event handle functions
  function handlepub_charger;

# transitions
  M_EVT_CHARGER_OUT ->_return;
  M_EVT_EXIT ->_return;

# call event functions
  _default      -> handlepub_charger;
}

# sdcardpullout
state s_pub_pullout_sd =
{
  module = public/s_pub_pullout_sd;

# standard functions:
  init = initpub_pullout_sd;
  exit = exitpub_pullout_sd;
  paint = paintpub_pullout_sd;

# event handle functions
  function handlepub_pullout_sd;

# transitions
  M_EVT_EXIT ->_return;

# call event functions
  _default      -> handlepub_pullout_sd;
}

# usb_charger_detect
state s_pub_usb_detect =
{
  module = public/s_pub_usb_detect;

# standard functions:
  init = initpub_usb_detect;
  exit = exitpub_usb_detect;
  paint = paintpub_usb_detect;

# event handle functions
  function handlepub_usb_detect;

# transitions
  M_EVT_CHARGER ->s_pub_charger;
  M_EVT_EXIT ->_return;
  M_EVT_USBDISK ->s_pub_usbdisk;

# call event functions
  _default      -> handlepub_usb_detect;
}

# usbdisk
state s_pub_usbdisk =
{
  module = public/s_pub_usbdisk;

# standard functions:
  init = initpub_usbdisk;
  exit = exitpub_usbdisk;
  paint = paintpub_usbdisk;

# event handle functions
  function handlepub_usbdisk;

# transitions
  M_EVT_EXIT ->_return;

# call event functions
  _default      -> handlepub_usbdisk;
}

# setmenu
state s_pub_set_menu =
{
  module = public/s_pub_set_menu;

# standard functions:
  init = initpub_set_menu;
  exit = exitpub_set_menu;
  paint = paintpub_set_menu;

# event handle functions
  function handlepub_set_menu;

# transitions
  M_EVT_EXIT ->_return;
  M_EVT_RETURN_ROOT +>_return(STACKROOT);
  M_EVT_TIMEOUT ->_return;

# call event functions
  _default      -> handlepub_set_menu;
}

# 
state s_pub_standby =
{
  module = public/s_pub_standby;

# standard functions:
  init = initpub_standby;
  exit = exitpub_standby;
  paint = paintpub_standby;

# event handle functions
  function handlepub_standby;

# transitions
  M_EVT_EXIT ->_return;

# call event functions
  _default      -> handlepub_standby;
}

# 
state preproc =
{
  efunction ddaudctrlhandler;
  efunction ddaudctrltimerhandler;
  efunction ddlineinhandle;
  efunction ddpubtimerhandler;
  efunction ddsdcardhandler;
  efunction ddusbhostdiskhandler;
  efunction ddusbdetecthandle;
  efunction ddusbouthandler;
  efunction dduserkeyhandler;
# transitions
  M_EVT_AUDIO_CTRL ->ddaudctrlhandler;
  M_EVT_AUDIO_CTRL_TIMER ->ddaudctrltimerhandler;
  M_EVT_LINE_IN ->ddlineinhandle;
  M_EVT_PUB_TIMER ->ddpubtimerhandler;
  M_EVT_SDCARD ->ddsdcardhandler;
  M_EVT_USBHOSTDISK ->ddusbhostdiskhandler;
  M_EVT_USB_IN ->ddusbdetecthandle;
  M_EVT_USB_OUT ->ddusbouthandler;
  M_EVT_USER_KEY ->dduserkeyhandler;

}

# 
state postproc =
{
# transitions
  M_EVT_Z00_POWEROFF +>s_pub_switch_off;
  M_EVT_Z01_MUSIC_PLAY +>s_clk_music_play;
  M_EVT_Z02_STANDBY +>s_pub_standby;

}

# cameracapture
state s_camera_capture =
{
  module = camera/s_camera_capture;

# standard functions:
  init = initcamera_capture;
  exit = exitcamera_capture;
  paint = paintcamera_capture;

# event handle functions
  function handlecamera_capture;

# transitions
  M_EVT_EXIT ->_return;
  M_EVT_RETURN_ROOT +>_return(STACKROOT);

# call event functions
  _default      -> handlecamera_capture;
}

# audiorecord
state s_audio_record =
{
  module = public/s_audio_record;

# standard functions:
  init = initaudio_record;
  exit = exitaudio_record;
  paint = paintaudio_record;

# event handle functions
  function handleaudio_record;

# transitions
  M_EVT_EXIT ->_return;
  M_EVT_MENU +>s_pub_set_menu;
  M_EVT_RETURN_ROOT +>_return(STACKROOT);

# call event functions
  _default      -> handleaudio_record;
}

# audiotomplay
state s_audio_tomplay =
{
  module = public/s_audio_tomplay;

# standard functions:
  init = initaudio_tomplay;
  exit = exitaudio_tomplay;
  paint = paintaudio_tomplay;

# event handle functions
  function handleaudio_tomplay;

# transitions
  M_EVT_EXIT ->_return;
  M_EVT_MENU +>s_pub_set_menu;
  M_EVT_RETURN_ROOT +>_return(STACKROOT);

# call event functions
  _default      -> handleaudio_tomplay;
}

# audiomain
state s_audio_main =
{
  module = audio/s_audio_main;

# standard functions:
  init = initaudio_main;
  exit = exitaudio_main;
  paint = paintaudio_main;

# event handle functions
  function handleaudio_main;

# transitions
  M_EVT_ABPLAY +>s_audio_abplay;
  M_EVT_EXIT ->_return;
  M_EVT_MENU +>s_pub_set_menu;
  M_EVT_RETURN2 ->_return(1);
  M_EVT_RETURN_ROOT +>_return(STACKROOT);

# call event functions
  _default      -> handleaudio_main;
}

# nouse
state s_clk_music_play =
{
  module = audio/s_clk_music_play;

# standard functions:
  init = initclk_music_play;
  exit = exitclk_music_play;
  paint = paintclk_music_play;

# event handle functions
  function handleclk_music_play;

# transitions
  M_EVT_EXIT ->_return;
  M_EVT_RETURN_ROOT +>_return(STACKROOT);
  M_EVT_TIMEOUT ->_return;

# call event functions
  _default      -> handleclk_music_play;
}

# abplay
state s_audio_abplay =
{
  module = audio/s_audio_abplay;

# standard functions:
  init = initaudio_abplay;
  exit = exitaudio_abplay;
  paint = paintaudio_abplay;

# event handle functions
  function handleaudio_abplay;

# transitions
  M_EVT_EXIT ->_return;
  M_EVT_RETURN_ROOT +>_return(STACKROOT);

# call event functions
  _default      -> handleaudio_abplay;
}

# 
state s_linein_play =
{
  module = audio/s_linein_play;

# standard functions:
  init = initlinein_play;
  exit = exitlinein_play;
  paint = paintlinein_play;

# event handle functions
  function handlelinein_play;

# transitions
  M_EVT_EXIT ->_return;
  M_EVT_RETURN_ROOT +>_return(STACKROOT);

# call event functions
  _default      -> handlelinein_play;
}

# radioplayer
state s_radio_player =
{
  module = radio/s_radio_player;

# standard functions:
  init = initradio_player;
  exit = exitradio_player;
  paint = paintradio_player;

# event handle functions
  function handleradio_player;

# transitions
  M_EVT_EXIT ->_return;
  M_EVT_RADIO_REC +>s_audio_record;
  M_EVT_RETURN ->_return;
  M_EVT_RETURN_ROOT +>_return(STACKROOT);

# call event functions
  _default      -> handleradio_player;
}

